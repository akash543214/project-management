generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  email        String        @unique
  password     String?       // Nullable: only required for local users
  googleId     String?       @unique
  provider     AuthProvider  @default(local)
  refreshToken String?

  created_at   DateTime      @default(now()) @db.Timestamp(6)

  projects     Project[]
  tasks        Task[]        @relation("AssignedTasks")
  owned_tasks  Task[]        @relation("TaskOwner")      

}

model Project {
  id         Int       @id @default(autoincrement())
  title       String
  description  String?
  user_id    Int
  created_at DateTime  @default(now()) @db.Timestamp(6)

  owner      User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
  tasks      Task[]
}

model Task {
  id              Int        @id @default(autoincrement())
  title           String
  content         String?
  project_id      Int
  owner_id         Int
  parent_task_id  Int?
  assignee_id     Int?
  status          TaskStatus   @default(PENDING)
  priority        TaskPriority @default(MEDIUM)
  deadline        DateTime? 
  created_at      DateTime     @default(now()) @db.Timestamp(6)

  project         Project    @relation(fields: [project_id], references: [id], onDelete: Cascade)
  assignee        User?      @relation("AssignedTasks", fields: [assignee_id], references: [id])
  parent_task     Task?      @relation("Subtasks", fields: [parent_task_id], references: [id])
  owner           User       @relation("TaskOwner", fields: [owner_id], references: [id])  
  subtasks        Task[]     @relation("Subtasks")
}

enum TaskStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum AuthProvider {
  local
  google
}
